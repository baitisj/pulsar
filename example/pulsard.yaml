#
# This is an idea of where I'd like to see config files wind up.
#

---

modules:
  jackaudio:
    # maintain these connections inside the jackaudio server between
    # the jackaudio clients
    connect:
      # these are jackaudio client and port names, not node and channel names
      inputs:
        - [ system:Left, pulsar:in_left ]
        - [ system:Right, pulsar:in_right ]
        - [ system:demod, pulsar:in_demod ]
      outputs:
        - [ system:Left, pulsar:out_left ]
        - [ system:Right, pulsar:out_right ]
        - [ system:demod, pulsar:out_demod ]

# define some reusable bits of config with names they
# are identified by
templates:
  gain:
    class: pulsar::ladspa::node
    plugin:
      filename: /usr/lib/ladspa/amp.so
      id: 1048
  compressor:
    class: pulsar::ladspa::node
    # a scalar value is the same as specifying it as the
    # filename value and providing no other values
    plugin: /usr/lib/ladspa/ZamComp-ladspa.so
    # if there is no id present then if there is only one
    # type in the ladspa file automatically use that type
    # otherwise throw an exception
  equalizer:
    class: pulsar::ladspa::node
    plugin: /usr/lib/ladspa/ZamEQ-ladspa.so

# create reusable signal processing chains where all
# interaction is done via the root and leaf defined
# first
chains:
  squelch_tail_remover:
    inputs: demod_in
    outputs: demod_out
    connect:
      demod_in:
        - delay:Input
        - gate:Detector In
    nodes:
      - name: delay
        type: pulsar::ladspa::node
        plugin:
          filename: /usr/lib/ladspa/delay_1898.so
          id: 1898
        connect:
          Output: gate:Audio In

      - name: gate
        type: pulsar::ladspa::node
        plugin: /usr/lib/ladspa/ZamGate-ladspa.so
        connect: squelch_tail_remover:demod_out

  compressor_thing:
    inputs: [ left, right ]
    outputs: [ left, right ]
    connect:
      left: left_input_gain:Input
      right: right_input_gain:Input
    nodes:
      - name: left_input_gain
        template: gain
        connect:
          # connection is specified as a list so more
          # than one connection can exist
          Output:
            - left_compressor:Audio In

      - name: left_compressor
        template: compressor
        connect:
          # scalar value is the same as a list with 1 item
          Audio Out: left_output_gain:Input

      - name: left_output_gain
        template: gain
        # if no output channel is specified for the connection
        # then every output channel is connected to the target channel
        connect: compressor_thing:left

      - name: right_input_gain
        template: gain
        # connect the only output to all the inputs of the
        # target node
        connect: right_compressor:*

      - name: right_compressor
        template: compressor
        connect:
          Audio Out: right_output_gain:*

      - name: right_output_gain
        template: gain
        connect: compressor_thing:right

stacks:
  receive:
    config:
      channels: 1
    nodes:
      - template: gain
      - chain: remove_squelch_tails
      - template: gain

# everything goes inside a domain for processing
# a domain is a contract that everything present
# in it operates phase coherently
domains:
  main:
    config:
      sample_rate: 48000
      buffer_size: 1024
      threads: 4

    # the domain supports any directed acyclic topology
    # though the jackaudio node looks like a cycle
    # it is broken internally because the outputs
    # of that node do not depend on the inputs
    nodes:
      - name: io
        class: pulsar::jackaudio::node
        config:
          client_name: pulsar
        inputs: [ out_demod, out_left, out_right ]
        outputs: [ in_demod, in_left, in_right ]
        connect:
          in_demod: receive_audio
          in_left: eq_left
          in_right: eq_right

      - name: eq_left
        template: equalizer
        connect: compressor_chain:left

      - name: eq_right
        template: equalier
        connect: compressor_chain:right

      - name: compressor_chain
        chain: compressor_thing
        connect: io
        # same as this because the channel orders are the same
        # connect:
        #   left: io:out_left
        #   right: io:out_right

      - name: receive_audio
        stack: receive
        connect: io:out_demod
