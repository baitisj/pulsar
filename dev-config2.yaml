# working on a new config file format to handle stacks,
# normalize things, and clean up
---

engine:
  # 0 to auto-detect number of threads if possible
  # the default is to auto-detect but specify the number of
  # threads if desired or if detection is not working
  threads: 0
  loggers:
    console:
      level: info
      sources:
        - pulsar
        # - pulsar.locking
        - jackaudio
      memory:
        level: debug
        # this will use a lot of CPU but is handy when crashing
        # level: trace

templates:
  gain:
    type: plugin::ladspa
    plugin:
      filename: /usr/lib/ladspa/amp.so
      id: 1048
  compressor:
    type: plugin::ladspa
    plugin:
      # if no ladspa type id is specified and the file
      # only has a single type in it then that one will
      # be used by default.
      filename: /usr/local/lib/ladspa/ZamComp-ladspa.so
    config:
      Knee: 0
      Threshold: 0
      Makeup: 0
      Sidechain: 1
  gate:
    type: plugin::ladspa
    plugin:
      filename: /usr/local/lib/ladspa/ZamGate-ladspa.so
  delay:
    type: plugin::ladspa
    plugin:
      filename: /usr/lib/ladspa/delay_1898.so
      id: 1899
  tube:
    type: plugin::ladspa
    plugin:
      filename: /usr/local/lib/ladspa/ZamTube-ladspa.so
  # Chains are nodes that expose the nodes under them
  # as if the chain node had the properties of those nodes.
  # Chain node inputs forward to the inputs of a node in the
  # chain and outputs of the last nodes in a chain forward
  # through the outputs of the chain node. Chain state and
  # configuration properties are also exposed from nodes
  # inside the chain.
  remove_squelch_tail:
    type: chain
    channels: 1
    state:
      - gate:*
    forward:
      in_1:
        - delay:Input
        - gate:Sidechain Input
    nodes:
      - name: delay
        template: delay
        config:
          Delay Time (s): .1
          Max Delay (s): .2
        link:
          Output: gate:Audio Input 1
      - name: gate
        template: gate
        config:
          Sidechain: 1
          Threshold: -65
          Attack: 25
          Release: 25
          Max gate close: -.inf
        forward:
          Audio Output 1: remove_squelch_tail:out_1
  # Stacks are transformed into chains that automatically
  # handle the N:N links between the node list and
  # automatically forward to the first node listed and
  # from the last node listed. Chains are free-form
  # directed graphs and stacks are linear lists.
  # Chain nodes are identified by name and stack nodes
  # are identified by position. Any stack node can be
  # bypassed which will remove any effect it has on the
  # stack. This way individual effects can be turned off
  # and on for A/B testing. There is not an obvious way
  # to implement bypass with chain nodes yet.
  tube_preamp:
    type: stack
    channels: 2
    nodes:
      - name: input_level
        template: gain
      - name: tube
        template: tube
      - name: output_level
        template: gain

daemons:
  watch_jack_connections:
    class: jackaudio::connections
    config:
      connect:
        # - [ system:capture_1, pulsar:left_in ]
        # - [ system:capture_2, pulsar:right_in ]
        # - [ pulsar:left_out, system:playback_1 ]
        # - [ pulsar:right_out, system:playback_2 ]

project:
  config:
    # This only has to be manually specified if there is no
    # IO node available when the domain is activated. During
    # activation the project will be configured with the sample
    # rate and buffer size of the io node. Or if the sample rate
    # or buffer size are set in the project and not the io node
    # then the io node will adopt the values set and configure any
    # other values that are not set. If the project and io node
    # do not work out all the required configuration then an error
    # is generated. If any option is specified (instead of discovered)
    # and does not match then an error is generated. If there is more
    # than one io node then they must all agree after the configuration
    # is worked out.
    # sample_rate: 48000
    # buffer_size: 1024
  nodes:
    jack:
      # jack is an io node
      type: plugin::jackaudio
      config:
        client_name: pulsar
        # reduce sensitivity because of interrupt isues on test
        # hardware
        watchdog_timeout_ms: 1500
        # can also specify this for jack
        # sample_rate: 48000
        # buffer_size: 1024
      # Inputs and outputs are from the point of view of the node
      # itself. This means that input to the node becomes output
      # for jack and input from jack becomes the output of the node.
      # It causes some odd naming in the input/output definition but
      # when used in linking it makes sense.
      inputs:
        - left_out
        - right_out
        - demod_out
        - mono_out
        - left_loop_out
        - right_loop_out
        - left_tube_out
        - right_tube_out
      outputs: [ left_in, right_in, demod_in ]
      # connect the outputs of this node to the inputs
      # of other nodes in the project
      link:
        left_in:
          - jack:left_loop_out
          - tube_simulator:in_1
        right_in:
          - jack:right_loop_out
          - tube_simulator:in_2
        demod_in: receive_processor:in_1

    tube_simulator:
      # Bring in the configuration defined in the template
      # and merge with this content.
      template: tube_preamp
      link:
        out_1: jack:left_tube_out
        out_2: jack:right_tube_out

    receive_processor:
      template: remove_squelch_tail
      link:
        out_1: jack:demod_out
